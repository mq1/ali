#!/usr/bin/env bash

# SUGGESTED PARTITION SCHEME
# ==========================
# DEVICE       PARTITION                         SIZE
# /dev/sda1    Windows Recovery Environment      500MiB
# /dev/sda2    Windows ESP                       100MiB
# /dev/sda3    Microsoft Reserved Partition      16MiB
# /dev/sda4    Microsoft basic data partition    Arbitrary
# /dev/sda5    Linux ESP                         50MiB
# /dev/sda6    Linux Boot                        200MiB
# /dev/sda6    Linux Swap                        8GiB
# /dev/sda7    Linux Root                        Remaining space

# DEFAULTS
# ========

_TO_INSTALL=" \
base \
base-devel \
f2fs-tools \
sudo \
networkmanager \
openssh \
git \
zsh \
bat \
lsd \
neovim \
xclip \
flatpak \
noto-fonts \
noto-fonts-cjk \
noto-fonts-emoji \
mpv \
youtube-dl \
ntfs-3g \
intel-ucode \
grub \
efibootmgr \
"

_TO_INSTALL_AUR="yay-bin"

_EFI_PARTITION=/dev/sda5
_BOOT_PARTITION=/dev/sda6
_SWAP_PARTITION=/dev/sda7
_ROOT_PARTITION=/dev/sda8
_TIME_ZONE=Europe/Rome
_LOCALE=en_US
_HOSTNAME=mq-desktop
_USER_NAME=manuel
_INSTALL_NVIDIA=true
_INSTALL_GNOME=true
_INSTALL_FIREFOX=true

is_installing() {
    [ "$1" = true ] && echo "*" || echo " "
}

current_config() {
    cat <<EOF
Current config
==============

[e]fi           => $_EFI_PARTITION
[b]oot          => $_BOOT_PARTITION
[s]wap          => $_SWAP_PARTITION
[r]oot          => $_ROOT_PARTITION

[t]ime zone     => $_TIME_ZONE
[l]ocale        => $_LOCALE
[h]ostname      => $_HOSTNAME
[u]ser          => $_USER_NAME
[p]assword      => $_PASSWORD

Installing
[$(is_installing $_INSTALL_NVIDIA)] [n]vidia
[$(is_installing $_INSTALL_INTEL)] [i]ntel-media-driver
[$(is_installing $_INSTALL_GNOME)] [g]nome
[$(is_installing $_INSTALL_KDE)] [k]de
[$(is_installing $_INSTALL_FIREFOX)] [f]irefox
[$(is_installing $_INSTALL_CHROME)] [c]hrome
[$(is_installing $_INSTALL_CHROMIUM)] c[h]romium
[$(is_installing $_INSTALL_BRAVE)] br[a]ve
[$(is_installing $_INSTALL_VSCODIUM)] [v]scodium

[d]one
e[x]it


EOF
}

prompt() {
    read -p "> " action
    case "$action" in
        e) read -p "EFI partition => " _EFI_PARTITION;;
        b) read -p "Boot partition => " _BOOT_PARTITION;;
        s) read -p "Swap partition => " _SWAP_PARTITION;;
        r) read -p "Root partition => " _ROOT_PARTITION;;
        t) read -p "Time zone => " _TIME_ZONE;;
        l) read -p "Locale => " _LOCALE;;
        h) read -p "Hostname => " _HOSTNAME;;
        u) read -p "User name => " _USER_NAME;;
        p) read -p "Password => " _PASSWORD;;
        n) [ "$_INSTALL_NVIDIA" = true ] && _INSTALL_NVIDIA=false || _INSTALL_NVIDIA=true;;
        g) [ "$_INSTALL_GNOME" = true ] && _INSTALL_GNOME=false || _INSTALL_GNOME=true && _INSTALL_KDE=false ;;
        k) [ "$_INSTALL_KDE" = true ] && _INSTALL_KDE=false || _INSTALL_KDE=true && _INSTALL_GNOME=false ;;
        f) [ "$_INSTALL_FIREFOX" = true ] && _INSTALL_FIREFOX=false || _INSTALL_FIREFOX=true;;
        c) [ "$_INSTALL_CHROME" = true ] && _INSTALL_CHROME=false || _INSTALL_CHROME=true;;
        h) [ "$_INSTALL_CHROMIUM" = true ] && _INSTALL_CHROMIUM=false || _INSTALL_CHROMIUM=true;;
        a) [ "$_INSTALL_BRAVE" = true ] && _INSTALL_BRAVE=false || _INSTALL_BRAVE=true;;
        v) [ "$_INSTALL_VSCODIUM" = true ] && _INSTALL_VSCODIUM=false || _INSTALL_VSCODIUM=true;;
        d) repeat=false;;
        x) exit 0;;
    esac
}

while $repeat; do
    clear
    current_config
    prompt
done

[ "$_INSTALL_NVIDIA" = true ] && TO_INSTALL="$_TO_INSTALL nvidia"
[ "$_INSTALL_INTEL" = true ] && TO_INSTALL="$_TO_INSTALL intel-media-driver"
[ "$_INSTALL_GNOME" = true ] && TO_INSTALL="$_TO_INSTALL gnome gnome-tweaks tilix python-nautilus"
[ "$_INSTALL_KDE" = true ] && TO_INSTALL="$_TO_INSTALL plasma plasma-wayland-session kde-applications"
[ "$_INSTALL_FIREFOX" = true ] && TO_INSTALL="$_TO_INSTALL firefox"
[ "$_INSTALL_CHROME" = true ] && TO_INSTALL_AUR="$_TO_INSTALL_AUR google-chrome"
[ "$_INSTALL_CHROMIUM" = true ] && TO_INSTALL_AUR="$_TO_INSTALL_AUR chromium-vaapi-bin chromium-widevine"
[ "$_INSTALL_BRAVE" = true ] && TO_INSTALL_AUR="$_TO_INSTALL_AUR brave-bin"
[ "$_INSTALL_VSCODIUM" = true ] && TO_INSTALL_AUR="$_TO_INSTALL_AUR vscodium-bin"

# PRE-INSTALLATION
# ================

# update the system clock
timedatectl set-ntp true

# format the partitions
mkfs.vfat -F 32 "$_EFI_PARTITION"
mkfs.ext4 -F "$_BOOT_PARTITION"
mkfs.f2fs -f "$_ROOT_PARTITION"
mkswap -f "$_SWAP_PARTITION"
swapon "$_SWAP_PARTITION"

# mount the file systems
mount "$_ROOT_PARTITION" /mnt
mkdir /mnt/boot
mount "$_BOOT_PARTITION" /mnt/boot
mkdir /mnt/efi
mount "$_EFI_PARTITION" /mnt/efi

# INSTALLATION
# ============

# install the packages
pacstrap /mnt "$_TO_INSTALL"

# CONFIGURE THE SYSTEM
# ====================

# generate the fstab file
genfstab -U /mnt >> /mnt/etc/fstab

# write the second part to be executed inside the chroot
cat > /mnt/part2.sh <<EOF
#!/usr/bin/env bash

aur-install() {
    su - "$_USER_NAME" -c " \
        for package in "\$@"; do
            if [ "\$package" = "chromium-vaapi-bin" ]; then
                gpg --recv-keys EB4F9E5A60D32232BB52150C12C87A28FEAC6B20
            fi
            cd ~ && \
            git clone "https://aur.archlinux.org/\$package.git" && \
            cd "\$package" && \
            makepkg -sirc --noconfirm && \
            cd ~ && \
            rm -rf "\$package"
        done
    "
}

# set the time zone
ln -sf "/usr/share/zoneinfo/$_LOCALTIME" /etc/localtime

# run hwclock to generate /etc/adjtime
hwclock --systohc

# uncomment $_LANGUAGE.UTF-8 UTF-8 in /etc/locale.gen
sed -i "s/#$_LANGUAGE.UTF-8 UTF-8/$_LANGUAGE.UTF-8 UTF-8/g" /etc/locale.gen

# generate the locale
locale-gen

# set the LANG variable in locale.conf
echo "LANG=$_LANGUAGE.UTF-8" > /etc/locale.conf

# create the hostname file
echo "$_HOSTNAME" > /etc/hostname

# add matching entries to /etc/hosts
cat >> /etc/hosts <<EOSF
127.0.0.1 localhost
::1 localhost
127.0.1.1 $_HOSTNAME.localdomain $_HOSTNAME
EOSF

# set the root password
echo "root:$_PASSWORD" | chpasswd


# MY STUFF
# ========

# create the user
useradd -m -s /usr/bin/zsh -G wheel "$_USER_NAME"

# set the user password
echo "$_USER_NAME:$_PASSWORD" | chpasswd

# add the wheel group (without password) to the sudoers file
echo "%wheel ALL=(ALL) NOPASSWD: ALL" | EDITOR='tee -a' visudo

# enable user namespaces
echo "kernel.unprivileged_userns_clone = 1" > /etc/sysctl.d/00-local-userns.conf

# install aur packages
aur-install "$_TO_INSTALL_AUR"

# add my dotfiles
su - "$_USER_NAME" -c " \
    git clone https://github.com/mquarneti/dotfiles.git ~/.dotfiles && \
    chmod +x ~/.dotfiles/install.sh && \
    ~/.dotfiles/install.sh \
"

# enable display manager service
[ "$_INSTALL_GNOME" = true ] && systemctl enable gdm.service
[ "$_INSTALL_KDE" = true ] && systemctl enable sddm.service;;

# enable networkmanager and bluetooth services
systemctl enable NetworkManager.service
systemctl enable bluetooth.service

# install and configure grub
grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg

# leave the chroot
exit
EOF

# make part2.sh executable
chmod +x /mnt/part2.sh

# execute part2.sh as chroot
arch-chroot /mnt /part2.sh

# remove part2.sh
rm /mnt/part2.sh

# umount all the partitions
umount -R /mnt

echo "installation complete"
