#!/usr/bin/env bash

# SUGGESTED PARTITION SCHEME
# ==========================
# DEVICE       PARTITION                         SIZE
# /dev/sda1    Windows Recovery Environment      500MiB
# /dev/sda2    Windows ESP                       100MiB
# /dev/sda3    Microsoft Reserved Partition      16MiB
# /dev/sda4    Microsoft basic data partition    Arbitrary
# /dev/sda5    Linux Boot                        260MiB
# /dev/sda6    Linux LVM                         Remaining space

# DEFAULTS
# ========

to_install=" \
base \
base-devel \
linux \
linux-firmware \
f2fs-tools \
sudo \
openssh \
git \
zsh \
flatpak \
noto-fonts \
noto-fonts-cjk \
noto-fonts-emoji \
ntfs-3g \
intel-ucode \
"

boot_partition=/dev/sda5
lvm_partition=/dev/sda6
luks=false
time_zone=Europe/Rome
locale=en_US
hostname=quarnobox
user_name=quarno
install_nvidia=true
install_intel=false
install_gnome=true
install_kde=false
install_firefox=true
install_chromium=false
install_code=false

is_installing() {
    $1 && echo "*" || echo " "
}

current_config() {
    cat <<EOF
Current config
==============

[b]oot          => $boot_partition
[l]vm           => $lvm_partition
[$(is_installing $luks)] [e]ncrypt_lvm

[t]ime zone     => $time_zone
l[o]cale        => $locale
[h]ostname      => $hostname
[u]ser          => $user_name
[p]assword      => $password

Installing
[$(is_installing $install_nvidia)] [n]vidia
[$(is_installing $install_intel)] [i]ntel-media-driver
[$(is_installing $install_gnome)] [g]nome
[$(is_installing $install_kde)] [k]de
[$(is_installing $install_firefox)] [f]irefox
[$(is_installing $install_chromium)] [c]hromium
[$(is_installing $install_code)] [v]scode (open-source release)

[d]one
e[x]it


EOF
}

prompt() {
    read -p "> " action
    case "$action" in
        b) read -p "Boot partition => " boot_partition;;
        l) read -p "LVM partition => " lvm_partition;;
        e) $luks && luks=false || luks=true;;
        t) read -p "Time zone => " time_zone;;
        o) read -p "Locale => " locale;;
        h) read -p "Hostname => " hostname;;
        u) read -p "User name => " user_name;;
        p) read -p "Password => " password;;
        n) $install_nvidia && install_nvidia=false || install_nvidia=true;;
        i) $install_intel && install_intel=false || install_intel=true;;
        g) $install_gnome && install_gnome=false || install_gnome=true && install_kde=false;;
        k) $install_kde && install_kde=false || install_kde=true && install_gnome=false;;
        f) $install_firefox && install_firefox=false || install_firefox=true;;
        c) $install_chromium && install_chromium=false || install_chromium=true;;
        v) $install_code && install_code=false || install_code=true;;
        d) repeat=false;;
        x) exit 0;;
    esac
}

while $repeat; do
    clear
    current_config
    prompt
done

$install_nvidia && to_install="$to_install nvidia"
$install_intel && to_install="$to_install intel-media-driver"
$install_gnome && to_install="$to_install gnome gnome-tweaks gnome-software-packagekit-plugin"
$install_kde && to_install="$to_install plasma plasma-wayland-session kde-applications"
$install_firefox && to_install="$to_install firefox"
$install_chromium && to_install="$to_install chromium"
$install_code && to_install="$to_install code"

# PRE-INSTALLATION
# ================

# update the system clock
timedatectl set-ntp true

if "$luks"; then
    cryptsetup luksFormat "$lvm_partition"
    cryptsetup open "$lvm_partition" cryptlvm
    lvm_partition=/dev/mapper/cryptlvm
    boot_options=" cryptdevice=$lvm_partition:cryptlvm"
fi

# create the lvm volumes
pvcreate "$lvm_partition"
vgcreate arch "$lvm_partition"
lvcreate -L 8G arch -n swap
lvcreate -l 100%FREE arch -n root

# format the partitions
mkfs.vfat -F 32 "$boot_partition"
mkfs.f2fs -f /dev/arch/root
mkswap -f /dev/arch/swap

# mount the file systems
mount /dev/arch/root /mnt
mkdir /mnt/boot
mount "$boot_partition" /mnt/boot
swapon /dev/arch/swap

# INSTALLATION
# ============

# install the packages
pacstrap /mnt "$to_install"

# CONFIGURE THE SYSTEM
# ====================

# generate the fstab file
genfstab -U /mnt >> /mnt/etc/fstab

# write the second part to be executed inside the chroot
cat > /mnt/part2.sh <<EOF
#!/usr/bin/env bash

# set the time zone
ln -sf "/usr/share/zoneinfo/$time_zone" /etc/localtime

# run hwclock to generate /etc/adjtime
hwclock --systohc

# uncomment $locale.UTF-8 UTF-8 in /etc/locale.gen
sed -i "s/#$locale.UTF-8 UTF-8/$locale.UTF-8 UTF-8/g" /etc/locale.gen

# generate the locale
locale-gen

# set the LANG variable in locale.conf
echo "LANG=$locale.UTF-8" > /etc/locale.conf

# create the hostname file
echo "$hostname" > /etc/hostname

# add matching entries to /etc/hosts
cat >> /etc/hosts <<EOSF
127.0.0.1 localhost
::1 localhost
127.0.1.1 $hostname.localdomain $hostname
EOSF


# MY STUFF
# ========

# disable the root user
passwd -l root

# create the user
useradd -m -s /usr/bin/zsh -G wheel "$user_name"

# set the user password
echo "$user_name:$password" | chpasswd

# add the wheel group (without password) to the sudoers file
echo "%wheel ALL=(ALL) NOPASSWD: ALL" | EDITOR='tee -a' visudo

# add my dotfiles
su - "$user_name" -c "$(curl -sSL git.io/Jeo5h)"

# enable display manager service
$install_gnome && systemctl enable gdm.service
$install_kde && systemctl enable sddm.service

# enable networkmanager and bluetooth services
systemctl enable NetworkManager.service
systemctl enable bluetooth.service

# mkinitcpio hooks
sed -i "s/^HOOKS=.*/HOOKS=(base systemd autodetect modconf block sd-lvm2 fsck filesystems)/" /etc/mkinitcpio.conf

# enable hooks required for luks
$luks && sed -i "s/sd-lvm2/keyboard sd-vconsole sd-encrypt sd-lvm2/" /etc/mkinitcpio.conf

# recreate the initramfs image
mkinitcpio -P

# install systemd-boot
bootctl --path=/boot install
mkdir -p /boot/loader/entries

# automatic systemd-boot update
echo > /etc/pacman.d/hooks/100-systemd-boot.hook <<EOSF
[Trigger]
Type = Package
Operation = Upgrade
Target = systemd

[Action]
Description = Updating systemd-boot
When = PostTransaction
Exec = /usr/bin/bootctl update
EOSF

# systemd-boot configuration
echo > /boot/loader/loader.conf <<EOSF
default arch
timeout 5
console-mode max
editor no
EOSF

# arch systemd-boot entry
echo > /boot/loader/entries/arch.conf <<EOSF
title Arch Linux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options$boot_options root=/dev/arch/root rw
EOSF

# leave the chroot
exit
EOF

# make part2.sh executable
chmod +x /mnt/part2.sh

# execute part2.sh as chroot
arch-chroot /mnt /part2.sh

# remove part2.sh
rm /mnt/part2.sh

# umount all the partitions
umount -R /mnt

echo "installation complete"
