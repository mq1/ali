#!/usr/bin/env bash

# SUGGESTED PARTITION SCHEME
# ==========================
# DEVICE       TYPE                            SIZE
# /dev/sda1    Windows recovery environment    500MiB
# /dev/sda2    EFI System                      100MiB
# /dev/sda3    Microsoft reserved              16MiB
# /dev/sda4    Microsoft basic data            Arbitrary
# /dev/sda5    Linux Boot                      260MiB
# /dev/sda6    Linux LVM                       Remaining space

# DEFAULTS
# ========

to_install=(
    base
    linux
    linux-firmware
    lvm2
    grub
    efibootmgr
    ntfs-3g
    intel-ucode
    vi
    sudo
    openssh
    git
    zsh
    xorg
    flatpak
    noto-fonts
    noto-fonts-cjk
    noto-fonts-emoji
)

efi_partition=/dev/sda2
boot_partition=/dev/sda5
lvm_partition=/dev/sda6
luks=false
time_zone=Europe/Rome
locale=en_US
hostname=quarnobox
user_name=quarno
install_nvidia=true
install_intel=false
install_gnome=true
install_kde=false
install_firefox=true
install_chromium=false
install_code=false

is_installing() {
    $1 && echo "*" || echo " "
}

current_config() {
    cat << EOF
Current config
==============

[e]fi           => $efi_partition
[b]oot          => $boot_partition
[l]vm           => $lvm_partition
[$(is_installing $luks)] e[n]crypt_lvm

[t]ime zone     => $time_zone
l[o]cale        => $locale
[h]ostname      => $hostname
[u]ser          => $user_name
[p]assword      => $password

Installing
[$(is_installing $install_nvidia)] n[v]idia
[$(is_installing $install_intel)] [i]ntel-media-driver
[$(is_installing $install_gnome)] [g]nome
[$(is_installing $install_kde)] [k]de
[$(is_installing $install_firefox)] [f]irefox
[$(is_installing $install_chromium)] [c]hromium
[$(is_installing $install_code)] v[s]code (open-source release)

[d]one
e[x]it


EOF
}

prompt() {
    read -rp "> " action
    case "$action" in
        e) read -rp "EFI partition => " efi_partition;;
        b) read -rp "Boot partition => " boot_partition;;
        l) read -rp "LVM partition => " lvm_partition;;
        n) $luks && luks=false || luks=true;;
        t) read -rp "Time zone => " time_zone;;
        o) read -rp "Locale => " locale;;
        h) read -rp "Hostname => " hostname;;
        u) read -rp "User name => " user_name;;
        p) read -rp "Password => " password;;
        v) $install_nvidia && install_nvidia=false || install_nvidia=true;;
        i) $install_intel && install_intel=false || install_intel=true;;
        g) $install_gnome && install_gnome=false || install_gnome=true && install_kde=false;;
        k) $install_kde && install_kde=false || install_kde=true && install_gnome=false;;
        f) $install_firefox && install_firefox=false || install_firefox=true;;
        c) $install_chromium && install_chromium=false || install_chromium=true;;
        s) $install_code && install_code=false || install_code=true;;
        d) repeat=false;;
        x) exit 0;;
    esac
}

while $repeat; do
    clear
    current_config
    prompt
done

$install_nvidia && to_install+=(nvidia)
$install_intel && to_install+=(intel-media-driver)
$install_gnome && to_install+=(gnome xdg-desktop-portal-gtk xdg-user-dirs-gtk gnome-tweaks)
$install_kde && to_install+=(plasma xdg-desktop-portal-kde xdg-user-dirs plasma-wayland-session kde-applications)
$install_firefox && to_install+=(firefox)
$install_chromium && to_install+=(chromium)
$install_code && to_install+=(code)

# PRE-INSTALLATION
# ================

# update the system clock
timedatectl set-ntp true

if "$luks"; then
    cryptsetup luksFormat "$lvm_partition"
    cryptsetup open "$lvm_partition" cryptlvm
    lvm_partition=/dev/mapper/cryptlvm
fi

# create the lvm volumes
vgchange -a n arch # deactivate lvm partitions of an eventual previous install
pvcreate "$lvm_partition" -ffy
vgcreate arch "$lvm_partition"
lvcreate -L 8G arch -n swap -y
lvcreate -l 100%FREE arch -n root -y

# format the partitions
mkfs.ext4 "$boot_partition"
mkfs.ext4 /dev/arch/root
mkswap -f /dev/arch/swap

# mount the file systems
mount /dev/arch/root /mnt
mkdir /mnt/boot /mnt/efi
mount "$boot_partition" /mnt/boot
mount "$efi_partition" /mnt/efi
swapon /dev/arch/swap

# INSTALLATION
# ============

# pick the 5 fastest up-to-date mirrors from Italy and Germany
pacman -S --noconfirm pacman-contrib
curl -s "https://www.archlinux.org/mirrorlist/?country=IT&country=DE&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist

# install the packages
pacstrap /mnt "${to_install[@]}"

# CONFIGURE THE SYSTEM
# ====================

# generate the fstab file
genfstab -U /mnt >> /mnt/etc/fstab

# write the second part to be executed inside the chroot
cat > /mnt/part2.sh << EOF
#!/usr/bin/env bash

# set the time zone
ln -sf "/usr/share/zoneinfo/$time_zone" /etc/localtime

# run hwclock to generate /etc/adjtime
hwclock --systohc

# uncomment $locale.UTF-8 UTF-8 in /etc/locale.gen
sed -i "s/#$locale.UTF-8 UTF-8/$locale.UTF-8 UTF-8/g" /etc/locale.gen

# generate the locale
locale-gen

# set the LANG variable in locale.conf
echo "LANG=$locale.UTF-8" > /etc/locale.conf

# create the hostname file
echo "$hostname" > /etc/hostname

# add matching entries to /etc/hosts
cat >> /etc/hosts << EOSF
127.0.0.1 localhost
::1 localhost
127.0.1.1 $hostname.localdomain $hostname
EOSF


# MY STUFF
# ========

# disable the root user
passwd -l root

# create the user
useradd -m -s /usr/bin/zsh -G wheel "$user_name"

# set the user password
echo "$user_name:$password" | chpasswd

# add the wheel group (without password) to the sudoers file
echo "%wheel ALL=(ALL) ALL" | EDITOR='tee -a' visudo

# enable display manager service
$install_gnome && systemctl enable gdm.service
$install_kde && systemctl enable sddm.service

# enable networkmanager and bluetooth services
systemctl enable NetworkManager.service
systemctl enable bluetooth.service

# mkinitcpio hooks
sed -i "s/^HOOKS/#HOOKS/" /etc/mkinitcpio.conf
if $luks; then
    echo "HOOKS=(base systemd autodetect block keyboard sd-vconsole sd-encrypt sd-lvm2 fsck filesystems)" >> /etc/mkinitcpio.conf
else
    echo "HOOKS=(base systemd autodetect block sd-lvm2 fsck filesystems)" >> /etc/mkinitcpio.conf
fi

# lz4 instead of gzip for faster boot time
sed -i 's/#COMPRESSION="lz4"/COMPRESSION="lz4"/' /etc/mkinitcpio.conf

# recreate the initramfs image
mkinitcpio -P

# install grub
grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg

# leave the chroot
exit
EOF

# make part2.sh executable
chmod +x /mnt/part2.sh

# execute part2.sh as chroot
arch-chroot /mnt /part2.sh

# remove part2.sh
rm /mnt/part2.sh

# umount all the partitions
umount -R /mnt

echo "installation complete"
