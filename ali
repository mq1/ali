#!/usr/bin/env bash

# SUGGESTED PARTITION SCHEME
# ==========================
# DEVICE       TYPE                            SIZE
# /dev/sda1    EFI System (/efi)               600MiB
# /dev/sda2    Linux filesystem (/boot)        1GiB
# /dev/sda3    Linux filesystem (toplevel)     Remaining disk space

# DEFAULTS
# ========

to_install=(
    base
    linux
    linux-firmware
    apparmor
    util-linux
    btrfs-progs
    ntfs-3g
    intel-ucode
    vim
    sudo
    openssh
    git
    zsh
    flatpak
)

to_install_flathub=(
    org.mozilla.firefox
)

gnome_pacman=(
    gdm
    gnome-backgrounds
    gnome-control-center
    gnome-disk-utility
    #gnome-getting-started-docs
    gnome-keyring
    #gnome-menus # used in gnome classic
    #gnome-remote-desktop # GNOME Remote Desktop server
    gnome-screenshot
    gnome-session
    gnome-settings-daemon
    gnome-shell
    #gnome-shell-extensions
    gnome-software
    gnome-system-monitor
    gnome-terminal
    #gnome-user-docs
    #gnome-user-share
    #gnome-video-effects
    grilo-plugins
    gvfs
    gvfs-afc
    gvfs-goa
    gvfs-google
    gvfs-gphoto2
    gvfs-mtp
    gvfs-nfs
    gvfs-smb
    mutter
    nautilus
    networkmanager
    rygel
    simple-scan
    sushi
    tracker
    tracker3
    tracker-miners
    tracker3-miners
    vino
    xdg-user-dirs-gtk
    yelp
)

gnome_flathub=(
    org.gnome.baobab # Disk Usage Analyzer
    org.gnome.Cheese # Cheese
    org.gnome.eog # Eye of GNOME
    #org.gnome.Epiphany # GNOME Web 
    org.gnome.Evince # Evince
    org.gnome.FileRoller # File Roller
    org.gnome.gedit # gedit
    org.gnome.Books # Books
    org.gnome.Boxes # GNOME Boxes
    org.gnome.Calculator # GNOME Calculator
    org.gnome.Calendar # Calendar
    org.gnome.Characters # GNOME Characters
    org.gnome.clocks # GNOME Clocks
    org.gnome.ColorViewer # GNOME Color Manager
    org.gnome.Contacts # Contacts
    org.gnome.Documents # Documents
    org.gnome.font-viewer # GNOME Fonts
    org.gnome.Logs # GNOME Logs
    org.gnome.Maps # GNOME Maps
    org.gnome.Photos # Photos
    org.gnome.Music # GNOME Music
    org.gnome.Weather # Weather
    org.gnome.Totem # Videos
    org.gnome.Extensions # Extensions
)

efi_partition=/dev/sda1
boot_partition=/dev/sda2
toplevel_partition=/dev/sda3
luks=false
time_zone=Europe/Rome
locale=en_US
hostname=quarnobox
user_name=quarno
install_nvidia=true
install_intel=false
install_gnome=true
install_firefox=true
install_chromium=false
install_code=false

boot_options="apparmor=1 lsm=lockdown,yama,apparmor rootflags=subvol=root"

is_installing() {
    $1 && echo "*" || echo " "
}

current_config() {
    cat << EOF
Current config
==============

[1] efi            => $efi_partition
[2] root           => $boot_partition
[3] toplevel       => $toplevel_partition
[4] [$(is_installing $luks)] encrypt toplevel

[10] time zone     => $time_zone
[11] locale        => $locale
[12] hostname      => $hostname
[13] user          => $user_name
[14] password      => $password

Installing
[20] [$(is_installing $install_nvidia)] nvidia
[21] [$(is_installing $install_intel)] intel-media-driver
[22] [$(is_installing $install_gnome)] gnome
[23] [$(is_installing $install_firefox)] firefox
[24] [$(is_installing $install_chromium)] chromium
[25] [$(is_installing $install_code)] vscode (open-source release)

[98] done
[99] exit


EOF
}

prompt() {
    read -rp "> " action
    case "$action" in
        1) read -rp "EFI partition => " efi_partition;;
        2) read -rp "Boot partition => " boot_partition;;
        3) read -rp "TopLevel partition => " toplevel_partition;;
        4) $luks && luks=false || luks=true;;
        10) read -rp "Time zone => " time_zone;;
        11) read -rp "Locale => " locale;;
        12) read -rp "Hostname => " hostname;;
        13) read -rp "User name => " user_name;;
        14) read -rp "Password => " password;;
        20) $install_nvidia && install_nvidia=false || install_nvidia=true;;
        21) $install_intel && install_intel=false || install_intel=true;;
        22) $install_gnome && install_gnome=false || install_gnome=true;;
        23) $install_firefox && install_firefox=false || install_firefox=true;;
        24) $install_chromium && install_chromium=false || install_chromium=true;;
        25) $install_code && install_code=false || install_code=true;;
        98) repeat=false;;
        99) exit 0;;
    esac
}

while $repeat; do
    clear
    current_config
    prompt
done

$install_nvidia && to_install+=(nvidia)
$install_intel && to_install+=(intel-media-driver)
$install_gnome && to_install=("${to_install[@]}" "${gnome_pacman[@]}") && to_install_flathub=("${to_install_flathub[@]}" "${gnome_flathub[@]}")
$install_gnome && to_install+=(gnome xdg-desktop-portal-gtk gnome-tweaks)
$install_firefox && to_install+=(firefox)
$install_chromium && to_install+=(chromium)
$install_code && to_install+=(code)

# PRE-INSTALLATION
# ================

# update the system clock
timedatectl set-ntp true

if "$luks"; then
    boot_options="$boot_options rd.luks.name=${toplevel_partition}=crypttoplevel rd.luks.options=discard"
    cryptsetup luksFormat -y -v "$toplevel_partition"
    cryptsetup open "$toplevel_partition" crypttoplevel
    toplevel_partition=/dev/mapper/crypttoplevel
fi

# format the partitions
mkfs.fat -F 32 "$boot_partition"
mkfs.btrfs -L toplevel "$toplevel_partition"

# mount the file systems
mount "$toplevel_partition" /mnt
btrfs subvolume create /mnt/root
btrfs subvolume create /mnt/home
umount /mnt

mount -o subvol=root "$toplevel_partition" /mnt
mount -o subvol=home "$toplevel_partition" /mnt/home

mkdir /mnt/boot /mnt/efi
mount "$boot_partition" /mnt/boot
mount "$efi_partition" /mnt/efi

# INSTALLATION
# ============

# pick the 5 fastest up-to-date mirrors from Italy and Germany
#pacman -Sy --noconfirm pacman-contrib
#curl -s "https://www.archlinux.org/mirrorlist/?country=IT&country=DE&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist

# install the packages
pacstrap /mnt "${to_install[@]}"

# CONFIGURE THE SYSTEM
# ====================

# generate the fstab file
#genfstab -U /mnt >> /mnt/etc/fstab

echo 'LABEL=toplevel / btrfs subvol=root,defaults,noatime,discard=async 0 0' >> /mnt/etc/fstab
echo 'LABEL=toplevel /home btrfs subvol=home,defaults,noatime,discard=async 0 0' >> /mnt/etc/fstab

HALF_RAM="$(expr $(free -m | grep -oP '\d+' | head -n 1) / 2)"
RAM_CHUNK_SIZE="$(expr $HALF_RAM / $(nproc))M"

# udev rule for zram
mkdir -p /mnt/etc/modules-load.d /mnt/etc/modprobe.d /mnt/etc/udev/rules.d
echo zram > /mnt/etc/modules-load.d/zram.conf
echo "options zram num_devices=$(nproc)" > /mnt/etc/modprobe.d/zram.conf

for i in $(seq 1 $(nproc)); do
    echo "KERNEL==\"zram${i}\", ATTR{disksize}=\"${RAM_CHUNK_SIZE}\" RUN=\"/usr/bin/mkswap /dev/zram${i}\", TAG+=\"systemd\"" >> /mnt/etc/udev/rules.d/99-zram.rules
done

for i in $(seq 1 $(nproc)); do
    echo "/dev/zram${i} none swap defaults 0 0" >> /mnt/etc/fstab
done

# write the second part to be executed inside the chroot
cat > /mnt/part2.sh << EOF
#!/usr/bin/env bash

# set the time zone
ln -sf "/usr/share/zoneinfo/$time_zone" /etc/localtime

# run hwclock to generate /etc/adjtime
hwclock --systohc

# uncomment $locale.UTF-8 UTF-8 in /etc/locale.gen
sed -i "s/#$locale.UTF-8 UTF-8/$locale.UTF-8 UTF-8/g" /etc/locale.gen

# generate the locale
locale-gen

# set the LANG variable in locale.conf
echo "LANG=$locale.UTF-8" > /etc/locale.conf

# create the hostname file
echo "$hostname" > /etc/hostname

# add matching entries to /etc/hosts
cat >> /etc/hosts << EOSF
127.0.0.1 localhost
::1 localhost
127.0.1.1 $hostname.localdomain $hostname
EOSF


# MY STUFF
# ========

# disable the root user
passwd -l root

# create the user
useradd -m -s /usr/bin/zsh -G wheel "$user_name"

# set the user password
echo "$user_name:$password" | chpasswd

# add the wheel group (without password) to the sudoers file
echo "%wheel ALL=(ALL) ALL" | EDITOR='tee -a' visudo

# install flatpak packages
su "$user_name" -c "flatpak install -y flathub ${to_install_flathub[@]}"

# enable display manager service
$install_gnome && systemctl enable gdm.service

# enable networkmanager and bluetooth services
systemctl enable NetworkManager.service
systemctl enable bluetooth.service

# enable fstrim timer
systemctl enable fstrim.timer

# enable apparmor profiles
systemctl enable apparmor.service

# mkinitcpio hooks
sed -i "s/^HOOKS/#HOOKS/" /etc/mkinitcpio.conf
if $luks; then
    echo "HOOKS=(base systemd autodetect block keyboard sd-vconsole sd-encrypt fsck filesystems)" >> /etc/mkinitcpio.conf
else
    echo "HOOKS=(base systemd autodetect block fsck filesystems)" >> /etc/mkinitcpio.conf
fi

# lz4 instead of gzip for faster boot time
sed -i 's/#COMPRESSION="lz4"/COMPRESSION="lz4"/' /etc/mkinitcpio.conf

# recreate the initramfs image
mkinitcpio -P

# install systemd-boot
bootctl --esp-path=/efi --boot-path=/boot install
mkdir -p /boot/loader/entries

# automatic systemd-boot update
mkdir -p /etc/pacman.d/hooks
cat > /etc/pacman.d/hooks/100-systemd-boot.hook << EOSF
[Trigger]
Type = Package
Operation = Upgrade
Target = systemd
[Action]
Description = Updating systemd-boot
When = PostTransaction
Exec = /usr/bin/bootctl --esp-path=/efi --boot-path=/boot update
EOSF

# systemd-boot configuration
cat > /boot/loader/loader.conf << EOSF
default arch.conf
timeout 5
console-mode max
editor no
EOSF

# arch systemd-boot entry
cat > /boot/loader/entries/arch.conf << EOSF
title Arch Linux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options $boot_options rw
EOSF

# leave the chroot
exit
EOF

# make part2.sh executable
chmod +x /mnt/part2.sh

# execute part2.sh as chroot
arch-chroot /mnt /part2.sh

# remove part2.sh
rm /mnt/part2.sh

# umount all the partitions
umount -R /mnt

echo "installation complete"
